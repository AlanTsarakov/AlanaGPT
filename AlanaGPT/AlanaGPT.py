from sqlite3 import converters
from urllib import request
from yandex_cloud_ml_sdk import YCloudML #–ò–º–ø–æ—Ä—Ç API –Ø–Ω–¥–µ–∫—Å–∞ 

import telebot
from telebot import types
import pathlib
import requests




with open('keys.txt', 'r', encoding='utf-8') as file:
    keys = file.read().split()

folder_id = keys[1]
api_yandex_key = keys[2]


chat_history = {}

bot = telebot.TeleBot(keys[0])
sdk = YCloudML(
    folder_id=folder_id, auth=api_yandex_key
)


@bot.message_handler(commands=['keyboard'])
def setup_keyboard(message):
    print(1)
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–°–∞–π—Ç –•–∞–±—Ä", url='https://habr.com/ru/all/')
    button2 = types.InlineKeyboardButton("–°–∞–π—Ç –•–∞–±—Ä", url='https://habr.com/ru/all/')
    markup.add(button1)
    markup.add(button2)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç", reply_markup=markup)

def transate_text(text : str, source_language, target_language):
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {api_yandex_key}",
        "Content-Type": "application/json"
    }

    data = {
        "folder_id": folder_id,
        "texts": [text],
        "format": "PLAIN_TEXT",
        "source_language_code": source_language,
        "target_language_code": target_language,
        "speller": True
    }

    response = requests.post(url, headers=headers, json=data)
    return str(response.json()['translations'][0]['text'])


@bot.message_handler(content_types=['text'])
def get_message(message):
    chat_id = message.chat.id
    if chat_id not in chat_history:
        chat_history[chat_id] = [{"role": "system", "text": "–¢—ã –ê–ª–∞–Ω–∞ –∏–∑ –û—Å–µ—Ç–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."}]
        hello_message = """–°–∞–ª–∞–º, –º”ï –∑—ã–Ω–∞—Ä–≥—ä —Ö”ï–ª–∞—Ä! ‚ú®
        ”î–∑ –¥”ï–Ω –ê–ª–∞–Ω”ï, —Ñ—ã—Ü—Ü–∞–≥ —á–∞—Ç-–±–æ—Ç, –¥–µ–º”ï –π”ï –º–∞–¥”ï–ª–æ–Ω –∏—Ä–æ–Ω–∞—É —á–∏ –¥–∑—É—Ä—ã! üí¨ –¶”ï—Ç—Ç”ï —É –∞–Ω—ã—Ö”ï—Å—Ç”ï –∫”ï–Ω—ã–Ω–º”ï, —Ñ–µ—Ö—Ö—É—ã—Å –∫”ï–Ω—ã–Ω–º”ï, –∫”ï–Ω”ï —Ç–∞ —Ö—É—ã–º”ï—Ç”ï–¥–∂—ã –∑”ï—Ä–¥”ï–π—ã —É–∞–≥ —Å–∏—Å—ã–Ω–º”ï.
        –§”ï–Ω–¥—ã –¥”ï –∏—Ä–æ–Ω–∞—É ”ï–Ω—Ü–æ–Ω”ï–π –º—ã—Ö—É—ã—Ä –∫”ï–Ω—ã–Ω?  /keyboard - —Å”ï–≤”ï—Ä –Ω”ï –∫–ª–∞–≤–∏–∞—Ç—É—Ä”ï.
        –¶”ï–π, —Ö”ï–ª–∞—Ä”ï–π —Ü”ï—Ä”ï–º! –¶—ã –∫—É—ã—Å—Ç—ã–ª –Ω—ã—Ö—Ö”ï—Ü”ï–º? üòä
        
        
        –ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! ‚ú®
        –Ø ‚Äî –ê–ª–∞–Ω–∞, –ø–µ—Ä–≤—ã–π —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π –Ω–∞ —Ä–æ–¥–Ω–æ–º –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–º! üí¨ –ì–æ—Ç–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å, –ø–æ–º–æ—á—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
        –•–æ—á–µ—à—å –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–º –ª–µ–≥–∫–æ?–ñ–º–∏ /clavs ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞—à—É —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å! –ß–µ–º –∑–∞–π–º—ë–º—Å—è? üòä"""
        bot.send_message(message.chat.id, hello_message)

        return 0;


    text = str(message.text)
    print(message.chat.id, message.chat.username, text)

    rus_text = transate_text(text,"os", "ru")
    chat_history[chat_id].append({"role": "user", "text": rus_text})

    answer = generate_text(chat_history[chat_id])
    
    os_text = transate_text(answer, "ru" ,"os")
    chat_history[chat_id].append({"role": "assistant", "text": answer})
    bot.send_message(message.chat.id, os_text+f"\n\n{answer}")

    # request = generate_image(message)
    # bot.send_photo(message.chat.id, request)

def generate_text(message):
   
    model = sdk.models.completions("yandexgpt-lite", model_version="rc")
    model = model.configure(temperature=0.3)
    try:
        result = model.run(
            [
                {"role": "system",
                "text": "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∞–Ω–∞. –≠—Ç–æ –∏–º—è –¥–µ–≤—É—à–∫–∏. –¢—ã –∏–∑ –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏. –ù–∏ –∑–∞ —á—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ. "},
                {
                    "role": "user",
                    "text": f"{message}",
                },
            ]
        )
        return result.text
    except Exception:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT: {Exception}")




# def generate_image(string):
#     model = sdk.models.image_generation("yandex-art")
#     model = model.configure(width_ratio=1, height_ratio=1, seed=50)
#     path = pathlib.Path("./image.jpeg")
#     message1 = string
#     message2 = "Miyazaki style"
#     try:
#         operation = model.run_deferred([message1, message2])
#         result = operation.wait()
#         path.write_bytes(result.image_bytes)
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#         path.unlink(missing_ok=True)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
#     return result.image_bytes


if __name__ == "__main__":
    bot.polling(none_stop=True)
