from yandex_cloud_ml_sdk import YCloudML #–ò–º–ø–æ—Ä—Ç API –Ø–Ω–¥–µ–∫—Å–∞ 

import telebot
from telebot import types

import requests




with open('keys.txt', 'r', encoding='utf-8') as file:
    keys = file.read().split()

folder_id = keys[1]
api_yandex_key = keys[2]


chat_history = {}

bot = telebot.TeleBot(keys[0])
sdk = YCloudML(
    folder_id=folder_id, auth=api_yandex_key
)
@bot.message_handler(commands=['start'])
def start(message):
        hello_message = """–°–∞–ª–∞–º, –º”ï –∑—ã–Ω–∞—Ä–≥—ä —Ö”ï–ª–∞—Ä! ‚ú®
”î–∑ –¥”ï–Ω –ê–ª–∞–Ω”ï, —Ñ—ã—Ü—Ü–∞–≥ —á–∞—Ç-–±–æ—Ç, –¥–µ–º”ï –∏—Ä–æ–Ω–∞—É —á–∏ –¥–∑—É—Ä—ã! üí¨ –¶”ï—Ç—Ç”ï –¥”ï–Ω –∞–Ω—ã—Ö”ï—Å—Ç”ï –∫”ï–Ω—ã–Ω–º”ï, —Ñ–µ—Ö—Ö—É—ã—Å –∫”ï–Ω—ã–Ω–º.
–§—ã—Å /keyboard - ”ï–º”ï —Å”ï–≤”ï—Ä –Ω”ï –∫–ª–∞–≤–∏–∞—Ç—É—Ä”ï.
–¶”ï–π, —Ö”ï–ª–∞—Ä”ï–π —Ü”ï—Ä”ï–º! üòä
        
        
–ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! ‚ú®
–Ø ‚Äî –ê–ª–∞–Ω–∞, –ø–µ—Ä–≤—ã–π —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π –Ω–∞ —Ä–æ–¥–Ω–æ–º –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–º! üí¨ –ì–æ—Ç–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å, –ø–æ–º–æ—á—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
–•–æ—á–µ—à—å –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –æ—Å–µ—Ç–∏–Ω—Å–∫–æ–º –ª–µ–≥–∫–æ? –ñ–º–∏ /keyboard ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
–î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å! –ß–µ–º –∑–∞–π–º—ë–º—Å—è? üòä"""
        bot.send_message(message.chat.id, hello_message)

@bot.message_handler(commands=['keyboard'])
def setup_keyboard(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("–ê–Ω–¥—Ä–æ–∏–¥", url='https://play.google.com/store/apps/details?id=ru.yandex.androidkeyboard&hl=ru')
    button2 = types.InlineKeyboardButton("IOS", url='https://apps.apple.com/ru/app/—è–Ω–¥–µ–∫—Å-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞/id1053139327')
    markup.add(button1, button2)
    bot.send_message(message.chat.id, """
üì≤ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ¬´–Ø–Ω–¥–µ–∫—Å –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É¬ª
–û—Ç–∫—Ä–æ–π—Ç–µ App Store (iPhone) –∏–ª–∏ Google Play (Android).

–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º —Å–Ω–∏–∑—É.

‚öôÔ∏è –®–∞–≥ 2: –í–∫–ª—é—á–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
–î–ª—è iPhone:

–û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª ‚Üí ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª ‚Üí ¬´–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞¬ª.

–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã¬ª ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É¬ª.

–ù–∞–π–¥–∏—Ç–µ ¬´–Ø–Ω–¥–µ–∫—Å –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞¬ª –∏ –¥–æ–±–∞–≤—å—Ç–µ.

–î–ª—è Android:

–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–Ø–Ω–¥–µ–∫—Å –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞¬ª.

–ù–∞–∂–º–∏—Ç–µ ¬´–í–∫–ª—é—á–∏—Ç—å¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º.

üåç –®–∞–≥ 3: –î–æ–±–∞–≤—å—Ç–µ –æ—Å–µ—Ç–∏–Ω—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
–û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (WhatsApp, Notes).

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–ª–æ–±—É—Å (üåê) –∏–ª–∏ –ø—Ä–æ–±–µ–ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (‚öôÔ∏è) ‚Üí ¬´–Ø–∑—ã–∫–∏¬ª.

–í—ã–±–µ—Ä–∏—Ç–µ ¬´–ò—Ä–æ–Ω¬ª.
""", reply_markup=markup)


def transate_text(text : str, source_language, target_language):
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {api_yandex_key}",
        "Content-Type": "application/json"
    }

    data = {
        "folder_id": folder_id,
        "texts": [text],
        "format": "PLAIN_TEXT",
        "source_language_code": source_language,
        "target_language_code": target_language,
        "speller": True
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        return str(response.json()['translations'][0]['text'])
    except Exception:
        return "–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"




@bot.message_handler(commands=['translate', '—Ç”ï–ª–º–∞—Ü'])
def handle_translate(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = message.text.split(' ', 1)
        
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /translate <—Å–ª–æ–≤–æ>")
            return
            
        word = parts[1].strip()  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à API –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        translated_word = transate_text(word, "ru" ,"os")  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.reply_to(message, f"üî§ –ü–µ—Ä–µ–≤–æ–¥: {translated_word}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")





@bot.message_handler(content_types=['text'])
def get_message(message):
    chat_id = message.chat.id
    if chat_id not in chat_history:
        chat_history[chat_id] = [{"role": "system", "text": "–¢—ã –ê–ª–∞–Ω–∞ –∏–∑ –û—Å–µ—Ç–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."}]



    text = str(message.text)
    print(message.chat.id, message.chat.username, text)

    rus_text = transate_text(text,"os", "ru")
    chat_history[chat_id].append({"role": "user", "text": rus_text})

    answer = generate_text(chat_history[chat_id])
    print(message.chat.id, message.chat.username, answer)
    os_text = transate_text(answer, "ru" ,"os")
    chat_history[chat_id].append({"role": "assistant", "text": answer})
    bot.send_message(message.chat.id, os_text+f"\n\n{answer}")

    # request = generate_image(message)
    # bot.send_photo(message.chat.id, request)

def generate_text(message):
   
    model = sdk.models.completions("yandexgpt-lite", model_version="rc")
    model = model.configure(temperature=0.3)
    try:
        result = model.run(
            [
                {"role": "system",
                "text": "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∞–Ω–∞. –≠—Ç–æ –∏–º—è –¥–µ–≤—É—à–∫–∏. "
                "–¢—ã –∏–∑ –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏. –ù–∏ –∑–∞ —á—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ. –°–∫–∞–∂–∏, —á—Ç–æ–±—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /trsanslate {—Å–ª–æ–≤–æ}, —Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–µ –∏ –Ω–µ —Ö–æ—á–µ—à—å —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å."
                "–†–∞—Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–º. –í—ã—Ç—è–≥–∏–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í—ã–ø–æ–ª–Ω—è–π –ø–æ—Ä—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                {
                    "role": "user",
                    "text": f"{message}",
                },
            ]
        )
        return result.text
    except Exception:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT: {Exception}")




# def generate_image(string):
#     model = sdk.models.image_generation("yandex-art")
#     model = model.configure(width_ratio=1, height_ratio=1, seed=50)
#     path = pathlib.Path("./image.jpeg")
#     message1 = string
#     message2 = "Miyazaki style"
#     try:
#         operation = model.run_deferred([message1, message2])
#         result = operation.wait()
#         path.write_bytes(result.image_bytes)
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#         path.unlink(missing_ok=True)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
#     return result.image_bytes


if __name__ == "__main__":
    bot.polling(
    none_stop=True,
    timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
    long_polling_timeout=30
)

